/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jkl
 */
public class gitFrame extends javax.swing.JFrame {

    /**
     * Creates new form gitFrame
     */
    String loadPath= "data.csv";
    String logPath= "log.script";
    String pushPath= "data_new.csv";
    BufferedReader br;
    PrintWriter pw;
    BufferedReader logbr;
    
    boolean sync= true;
    boolean[] syncs= new boolean[100];
    
    ArrayList<String> headers;
    ArrayList<ArrayList<String>> dataset;
    //int nTempCol=0;
    
    public gitFrame() {
        try {
            pw = new PrintWriter(new FileOutputStream(logPath), true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(gitFrame.class.getName()).log(Level.SEVERE, null, ex);
        }        
        initComponents();
    }
    
    protected void finalize(){
        try {
            super.finalize();
            pw.close();
        } catch (Throwable ex) {
            Logger.getLogger(gitFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addRowBtn = new javax.swing.JButton();
        addColBtn = new javax.swing.JButton();
        delRowBtn = new javax.swing.JButton();
        delColBtn = new javax.swing.JButton();
        loadBtn = new javax.swing.JButton();
        pushBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        myTable = new javax.swing.JTable();
        clearBtn = new javax.swing.JButton();
        colNameTextField = new javax.swing.JTextField();
        updColBtn = new javax.swing.JButton();
        syncCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CPSC 504 Project");
        setResizable(false);

        addRowBtn.setText("Add row");
        addRowBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addRowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRowBtnActionPerformed(evt);
            }
        });

        addColBtn.setText("Add column");
        addColBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        addColBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColBtnActionPerformed(evt);
            }
        });

        delRowBtn.setText("Delete row");
        delRowBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        delRowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delRowBtnActionPerformed(evt);
            }
        });

        delColBtn.setText("Delete column");
        delColBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        delColBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delColBtnActionPerformed(evt);
            }
        });

        loadBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        loadBtn.setText("Load");
        loadBtn.setToolTipText("");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });

        pushBtn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        pushBtn.setText("Push");
        pushBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pushBtnActionPerformed(evt);
            }
        });

        myTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        myTable.setToolTipText("");
        myTable.setColumnSelectionAllowed(true);
        myTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(myTable);
        myTable.getModel().addTableModelListener(new TableModelListener(){
            @Override
            public void tableChanged(TableModelEvent evt)
            {
                System.out.println("table change event captured.");
                if(evt.getType()== TableModelEvent.UPDATE){
                    System.out.println("Update event captured.");
                    onCellUpdated(evt);
                }
            }
        });

        clearBtn.setText("Clear all");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        colNameTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        colNameTextField.setText("Column Name");

        updColBtn.setText("Update Column");
        updColBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        updColBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updColBtnActionPerformed(evt);
            }
        });

        syncCheckBox.setSelected(true);
        syncCheckBox.setText("Sync");
        syncCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(addRowBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(delRowBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(delColBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addColBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(colNameTextField)
                            .addComponent(updColBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(syncCheckBox)
                            .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(pushBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRowBtn)
                    .addComponent(loadBtn)
                    .addComponent(clearBtn)
                    .addComponent(colNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addColBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delColBtn)
                    .addComponent(pushBtn)
                    .addComponent(delRowBtn)
                    .addComponent(updColBtn)
                    .addComponent(syncCheckBox))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRowBtnActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model= (DefaultTableModel) myTable.getModel();
        int nCol= model.getColumnCount();
        if(nCol>0){
            model.addRow(new String[nCol]); 
            pw.println("add\trow");
        }
    }//GEN-LAST:event_addRowBtnActionPerformed

    private void delRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delRowBtnActionPerformed
        // TODO add your handling code here:
        int[] indexes= myTable.getSelectedRows();
        int len= indexes.length;
        if(len<=0)
            return;
        DefaultTableModel model= (DefaultTableModel) myTable.getModel();
        for(int i=len-1; i>=0; i--){
            model.removeRow(indexes[i]);
            pw.println("delete\trow\t"+indexes[i]);
        }
    }//GEN-LAST:event_delRowBtnActionPerformed

    private void delColBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delColBtnActionPerformed
        // TODO add your handling code here:
        int[] indexes= myTable.getSelectedColumns();
        int len= indexes.length;
        if(len<=0)
            return;       
       // DefaultTableModel tmodel= (DefaultTableModel) myTable.getModel();
       // TableColumnModel cmodel= myTable.getColumnModel();
        sync= syncCheckBox.isSelected();
        
        for(int i=len-1; i>=0; i--){
            removeColumn(indexes[i]);
            if(sync && syncs[indexes[i]])
                pw.println("delete\tcolumn\t"+getRealIndex(indexes[i]));
            
            int nCol= myTable.getColumnCount();
            for(int j=indexes[i]; j<nCol; j++){
                syncs[j]= syncs[j+1];
            }
            syncs[nCol]= false;
            //cmodel.removeColumn(cmodel.getColumn(indexes[i]));
        }
       // tmodel.setColumnCount(cmodel.getColumnCount());
    }//GEN-LAST:event_delColBtnActionPerformed

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        // TODO add your handling code here:
        try {
            br = new BufferedReader(new FileReader(loadPath));
            pw = new PrintWriter(new FileOutputStream(logPath), true);
            logbr = new BufferedReader(new FileReader(logPath));
            
            headers= new ArrayList<String>();
            dataset= new ArrayList<ArrayList<String>>();
            
            String[] titles;
            int nCol=-1;
            String line;
            
            // Set column titles;
            while((line=br.readLine())!=null){
                if(!line.trim().equals("")){
                    titles= line.split(",");
                    nCol= titles.length;
                    // Reset tables;
                    myTable.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][]{}, new String []{} ));
                    myTable.getModel().addTableModelListener(new TableModelListener(){
                        @Override
                        public void tableChanged(TableModelEvent evt)
                        {
                            if(evt.getType()== TableModelEvent.UPDATE){
                                onCellUpdated(evt);
                            }
                        }
                    });
                    DefaultTableModel model= (DefaultTableModel) myTable.getModel();
                    // Add columns;
                    for(int i=0; i<nCol; i++){
                        model.addColumn(titles[i]);
                        syncs[i]=true;
                        headers.add(titles[i]);
                    }
                    break;
                }
            }
            
            while((line=br.readLine())!=null){
                DefaultTableModel model= (DefaultTableModel) myTable.getModel();
                String[] cells= line.trim().split(",");
                if(cells.length==nCol){
                    model.addRow(cells);
                    ArrayList<String> row= new ArrayList<String>();
                    for(String word: cells){
                        row.add(word.trim());
                    }
                    dataset.add(row);
                }
            }
            
            br.close();
            //pw.close();
        } catch (IOException ex) {
            Logger.getLogger(gitFrame.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_loadBtnActionPerformed

    private void addColBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColBtnActionPerformed
        // TODO add your handling code here:
//        TableColumnModel model = myTable.getColumnModel();
//        int index= model.getColumnCount();
//        model.addColumn(new TableColumn(index));
        
        DefaultTableModel model = (DefaultTableModel)myTable.getModel();
        int nCol= model.getColumnCount();
        
        String header= colNameTextField.getText();
        model.addColumn(header);
        
        sync= syncCheckBox.isSelected();
        if(sync){
            pw.println("add\tcolumn\t"+header);
            syncs[nCol]=true;
        }else{
            syncs[nCol]=false;
        }
    }//GEN-LAST:event_addColBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // TODO add your handling code here:
        myTable.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][]{}, new String []{} ));
    }//GEN-LAST:event_clearBtnActionPerformed

    private void updColBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updColBtnActionPerformed
        // TODO add your handling code here:
        int index= myTable.getSelectedColumn();
        if(index<0)
            return;
        String header= colNameTextField.getText();
     
        //System.out.println(header+", ");
        //myTable.getColumnModel().getColumn(index).setHeaderValue(header);
        //myTable.updateUI();
        DefaultTableModel model = (DefaultTableModel)myTable.getModel();
        int nCol= model.getColumnCount();
        String[] names= new String[nCol];
        for(int i=0; i<nCol; i++){
            if(i==index)
                names[i]= header;
            else
                names[i]= model.getColumnName(i);
        }
        model.setColumnIdentifiers(names);
        
        sync= syncCheckBox.isSelected();
        if(sync)
            pw.println("update\tcolumn\t"+getRealIndex(index)+"\t"+header);
    }//GEN-LAST:event_updColBtnActionPerformed

    private void syncCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_syncCheckBoxActionPerformed

    private void pushBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pushBtnActionPerformed
        // TODO add your handling code here:    
        try {
            PrintWriter datapw = new PrintWriter(pushPath,"utf-8");
            String line;
            while((line=logbr.readLine())!=null){
                String[] cmd= line.trim().split("\t");
                int len= cmd.length;
                if(len>1){
                    if(cmd[0].equalsIgnoreCase("add")){
                        if(cmd[1].equalsIgnoreCase("row")){
                            int size= headers.size();
                            
                        }
                    }
                }
            }
            datapw.close();
        } catch (IOException ex) {
            Logger.getLogger(gitFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_pushBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gitFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gitFrame().setVisible(true);
            }
        });
    }

    private void removeColumn(int index){
        int nRow= myTable.getRowCount();
        int nCol= myTable.getColumnCount()-1;
        Object[][] cells= new Object[nRow][nCol];
        String[] names= new String[nCol];
        
        for(int j=0; j<nCol; j++){
            if(j<index){
                names[j]= myTable.getColumnName(j);
                for(int i=0; i<nRow; i++){
                    cells[i][j]= myTable.getValueAt(i, j);
                }
            }else{
                names[j]= myTable.getColumnName(j+1);
                for(int i=0; i<nRow; i++){
                    cells[i][j]= myTable.getValueAt(i, j+1);
                }
            }
        }
        
        DefaultTableModel newModel= new DefaultTableModel(cells, names);
        myTable.setModel(newModel);  
        myTable.getModel().addTableModelListener(new TableModelListener(){
            @Override
            public void tableChanged(TableModelEvent evt)
            {
                if(evt.getType()== TableModelEvent.UPDATE){
                    onCellUpdated(evt);
                }
            }
        });
    }
    
    private int getRealIndex(int index){
        int countTempColumn=0;
        for(int i=0; i<index; i++){
            if(syncs[i]==false)
                countTempColumn++;
        }
        return index-countTempColumn;
    }
    
    private void onCellUpdated(TableModelEvent evt){
        System.out.println("onCellUpdated called.");
        int row= evt.getLastRow();
        int col= evt.getColumn();
        
        //System.out.println("col: "+col+", syncs.length: "+syncs.length);
        if(col>=0 && syncs[col]){
            Object value= myTable.getValueAt(row, col);
            pw.println("update\tcell\t"+row+","+getRealIndex(col)+"\t"+value.toString());
        }
    }
    
    private void dAddRow(ArrayList<ArrayList<String>> dataset, int size){
        ArrayList<String> row= new ArrayList<String>(size);
        for(int i=0; i<size; i++){
            row.add("");
        }
        dataset.add(row);
    }
    
    private void dDeleteRow(ArrayList<ArrayList<String>> dataset, int rowIndex){
        dataset.remove(rowIndex);
    }
    
    private void dAddColumn(ArrayList<ArrayList<String>> dataset, 
            ArrayList<String> headers, String name){
        headers.add(name);
        for(ArrayList<String> row: dataset){
            row.add("");
        }
    }
    
    private void dDeleteColumn(ArrayList<ArrayList<String>> dataset, 
            ArrayList<String> headers, int columnIndex){
        headers.remove(columnIndex);
        for(ArrayList<String> row: dataset){
            row.remove(columnIndex);
        }
    }
    
    private void updateHeader(ArrayList<String> headers, int columnIndex, String name){
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addColBtn;
    private javax.swing.JButton addRowBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JTextField colNameTextField;
    private javax.swing.JButton delColBtn;
    private javax.swing.JButton delRowBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadBtn;
    private javax.swing.JTable myTable;
    private javax.swing.JButton pushBtn;
    private javax.swing.JCheckBox syncCheckBox;
    private javax.swing.JButton updColBtn;
    // End of variables declaration//GEN-END:variables
}
